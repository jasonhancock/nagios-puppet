#!/usr/bin/perl

# Copyright 2012-2016 Jason Hancock
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file is part of the nagios-puppet bundle that can be found
# at https://github.com/jasonhancock/nagios-puppet
#
# This plugin parses puppets last_run_summary.yaml file and complains if the last
# run was too long ago or if the last run failed for some reason

use strict;
use warnings;
use YAML qw(LoadFile);
use Nagios::Plugin;
use Nagios::Plugin::Threshold;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s [-c|--critical=<threshold> ] [ -w|--warning=<threshold> ] "
        . "[-f|--file=<path_to_file> ] ",
    shortname => 'Puppet Last Run',
);

$np->add_arg(
    spec => 'warning|w=s',
    help => '-w, --warning=Seconds'
);

$np->add_arg(
    spec => 'critical|c=s',
    help => '-c, --critical=Seconds'
);

$np->add_arg(
    spec    => 'file|f=s',
    help    => '-f, --file=Path to last_run_summary.yaml. Defaults to /opt/puppetlabs/puppet/cache/state/last_run_summary.yaml',
    default => '/opt/puppetlabs/puppet/cache/state/last_run_summary.yaml'
);

$np->getopts;

unless ( defined $np->opts->warning || defined $np->opts->critical ) {
    $np->nagios_die( " you didn't supply a threshold argument " );
}

$np->nagios_exit('UNKNOWN', "File doesn't exist or not readable " .
    $np->opts->file) unless (-r $np->opts->file);

my $data = LoadFile($np->opts->file);
my $delta = time() -  $data->{'time'}{'last_run'};

my $time_status = $np->check_threshold(
    check    => $delta,
    warning  => $np->opts->warning,
    critical => $np->opts->critical
);

my $puppet_status = 'UNCHANGED';
$puppet_status = 'CHANGED' if($data->{'changes'}{'total'} > 0);
$puppet_status = 'FAILED'  if($data->{'events'}{'failure'} > 0);

my $msg = "Last puppet run $delta seconds ago ($puppet_status)";

if($time_status > 0) {
    $np->nagios_exit($time_status, $msg);
}

$np->nagios_exit($puppet_status eq  'FAILED' ? 'CRITICAL' : 'OK', $msg);
