#!/usr/bin/perl

# Copyright 2012-2016 Jason Hancock
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file is part of the nagios-puppet bundle that can be found
# at https://github.com/jasonhancock/nagios-puppet
#

use strict;
use warnings;
use LWP;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s [-H|--host=<host> ] [ -p|--port=<port> ] [-U|--httpuser=<user>] [-P|--httppass=<pass>]",
    shortname => 'Dashboard Hosts',
);

$np->add_arg(
    spec     => 'host|H=s',
    help     => '-H, --host=Hostname or IP address',
    required => 1,
);

$np->add_arg(
    spec    => 'port|p=s',
    help    => '-p, --port=port',
    default => 80,
);

$np->add_arg(
    spec    => 'httpuser|U=s',
    help    => '-U, --user=user',
);

$np->add_arg(
    spec    => 'httppass|P=s',
    help    => '-P, --pass=pass',
);

$np->add_arg(
    spec    => 'realm|r=s',
    help    => '-r, --realm=realm',
    default => 'Puppet Dashboard'
);

$np->add_arg(
    spec    => 'ssl|s',
    help    => '-s, --ssl   Use SSL (For when puppet dashboard is behind https)',
);

$np->getopts;

my @interests = (
    'unresponsive',
    'failed',
    'pending',
    'changed',
    'unchanged',
    'unreported'
);

our $domain = sprintf('%s:%d',
    $np->opts->host,
    $np->opts->port
),

my $url = sprintf('http%s://%s/',
    defined($np->opts->ssl) ? 's' : '',
    $domain,
);

my $ua = new LWP::UserAgent;
if (defined($np->opts->httpuser)) {
  $ua->credentials(
    $domain,
    $np->opts->realm,
    $np->opts->httpuser,
    $np->opts->httppass
  );
}
my $response = $ua->get($url);

if (!$response->is_success) {
    # We failed
    $np->nagios_exit('UNKNOWN', $response->code . ": " . $response->status_line);
}

# Parse the markup, loading up anything that matches into the %nodes hash
my %nodes;
foreach my $line(split('\n', $response->decoded_content)) {
    if($line=~m/<a href="\/nodes\/(\w+)">(\d+)<\/a>/) {
        $nodes{$1} = $2;
    }
}

foreach my $interest(@interests) {
   $np->add_perfdata(
        label => $interest,
        value => defined($nodes{$interest}) ? $nodes{$interest} : 0,
        uom   => undef,
    );
}

$np->nagios_exit('OK', '');
