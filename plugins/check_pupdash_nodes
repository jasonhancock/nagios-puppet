#!/usr/bin/perl

# Copyright (c) 2012 Jason Hancock <jsnbyh@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# This file is part of the nagios-puppet bundle that can be found
# at https://github.com/jasonhancock/nagios-puppet

use strict;
use warnings;
use LWP;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s [-H|--host=<host> ] [ -p|--port=<port> ] [--httpuser=<user>] [--httppass=<pass>]",
    shortname => 'Dashboard Hosts',
);

$np->add_arg(
    spec => 'host|H=s',
    help => '-H, --host=Hostname or IP address'
);

$np->add_arg(
    spec    => 'port|p=s',
    help    => '-p, --port=port',
    default => 80,
);

$np->add_arg(
    spec    => 'httpuser=s',
    help    => '-U, --user=user',
);

$np->add_arg(
    spec    => 'httppass=s',
    help    => '-P, --pass=pass',
);

$np->add_arg(
    spec    => 'ssl|s',
    help    => '-s, --ssl   Use SSL (For when puppet dashboard is behind https)',
);

$np->getopts;

my @interests = (
    'unresponsive',
    'failed',
    'pending',
    'changed',
    'unchanged',
    'unreported'
);

our $domain = sprintf('%s:%d',
    $np->opts->host,
    $np->opts->port
),

my $url = sprintf('http%s://%s/', 
    defined($np->opts->ssl) ? 's' : '',
    $domain,
);

my $ua = new LWP::UserAgent;
if (defined($np->opts->httpuser)) {
  $ua->credentials($domain,'Puppet Dashboard',$np->opts->httpuser,$np->opts->httppass);
}
my $response = $ua->get($url);

if (!$response->is_success) {
    # We failed
    $np->nagios_exit('UNKNOWN', $response->code . ": " . $response->status_line);
}

# Parse the markup, loading up anything that matches into the %nodes hash
my %nodes;
foreach my $line(split('\n', $response->decoded_content)) {
    if($line=~m/<a href="\/nodes\/(\w+)">(\d+)<\/a>/) {
        $nodes{$1} = $2;
    }
}

foreach my $interest(@interests) {
   $np->add_perfdata(
        label => $interest,
        value => defined($nodes{$interest}) ? $nodes{$interest} : 0,
        uom   => undef,
    );
}

$np->nagios_exit('OK', '');
